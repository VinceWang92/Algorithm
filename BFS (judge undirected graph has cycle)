public class Solution {
    public boolean validTree(int n, int[][] edges) {
        if (n == 1 && edges.length == 0) return true;
        HashMap<Integer, List<Integer>> map = graphBuild(edges);
        if (map.size() != n) return false;
        //System.out.println(map);
        int[] states = new int[n];
        Queue<Integer> queue = new LinkedList<>();
        queue.offer(edges[0][0]);
        states[edges[0][0]] = 1;
        while (!queue.isEmpty()){
            int node = queue.poll();
            states[node] = 2;
            List<Integer> neibors = map.get(node);
            for (Integer ele : neibors){
                if (states[ele] == 1) return false;
                if (states[ele] == 2) continue;
                queue.offer(ele);
                states[ele] = 1;
            }
        }
        for (int state : states){
            if (state == 0) return false; 
        }
        return true;
    }
    
    private HashMap<Integer, List<Integer>> graphBuild(int[][] edges){
        HashMap<Integer, List<Integer>> map = new HashMap<>();
        for (int j = 0; j < edges.length; j++){
            if (map.containsKey(edges[j][0])){
                map.get(edges[j][0]).add(edges[j][1]);
            } else {
                List<Integer> list = new ArrayList<>();
                list.add(edges[j][1]);
                map.put(edges[j][0], list);
            }
            if (map.containsKey(edges[j][1])){
                map.get(edges[j][1]).add(edges[j][0]);
            } else {
                List<Integer> list = new ArrayList<>();
                list.add(edges[j][0]);
                map.put(edges[j][1], list);
            }
        }
        return map;
    }
}
