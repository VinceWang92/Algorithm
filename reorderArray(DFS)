public class reOrderArray {
	public static void reOrderArray(int n){
		Map<Integer, Integer> map = new HashMap<Integer, Integer>();
		for (int i = 1; i <= n; i++){
			map.put(i, -1);
		}

		//dfs(n, 0, new ArrayList<Integer>(), map);
		dfs1(n, 0, new ArrayList<Integer>(), new HashMap<Integer, Integer>());
		
	}
	public static void dfs(int n, int idx, List<Integer> list, Map<Integer, Integer> map){
		if (list.size() == 2*n){
			for (Integer i : list){
				System.out.print(i + ", ");
			}
			System.out.println();
			return;
		}
		for (int i = 1; i <=n; i++){
			if (map.get(i) == -1){
				list.add(i);
				map.put(i, idx);
				dfs(n, idx + 1, list, map);
				list.remove(list.size() - 1);
				map.put(i, -1);
			} else if (map.get(i) == -2){
				continue;
			} else {
				if (idx - map.get(i) == i + 1){
					int formerIdx = map.get(i);
					list.add(i);
					map.put(i, -2);
					dfs(n, idx + 1, list, map);
					list.remove(list.size() - 1);
					map.put(i, formerIdx);
				}
			}
		}
		return;
	}
}
