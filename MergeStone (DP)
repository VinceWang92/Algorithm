// By adding the stones number from 1 to n, we write the DP table
public class mergeStone {
	  public static int minCost(int[] stones) {
	    if (stones == null || stones.length == 0 || stones.length == 1){
	      return 0;
	    }
	    int[][] dp = new int[stones.length + 1][stones.length + 1];
	    int[] subsum = new int[stones.length + 1];
	    for (int i = 1; i <= stones.length; i++){
	      dp[i][i] = stones[i-1];
	      subsum[i] = subsum[i-1] + stones[i - 1];
	    }
	    System.out.println(Arrays.toString(subsum));
	    int n = 1;
	    while (n <= stones.length - 1){
	      for (int i = 1; i + n < dp.length; i++){
	        dp[i][i + n] = Integer.MAX_VALUE;
	        for (int k = i; k < i +n; k++){
	        	int left = dp[i][k];
	        	if (k > i) 
	        		left += subsum[k] - subsum[i-1];
	        	int right = dp[k+1][i+n];
	        	if (i+n > k+1) 
	        		right += subsum[i+n] - subsum[k];
	        	dp[i][i+n] = Math.min(left + right, dp[i][i+n]);
	        }
	        System.out.println("i: "+ i+ ", i+n: "+ (i+n)+ ", dp[i][i+n]: " + dp[i][i+n]);
	      }
	      n++;
	    }
	    return dp[1][stones.length];
	  }
	
	  public static void main(String args[]){
		  System.out.println(minCost(new int[]{2,1,1,3,5,7,10}));
	  }
}
