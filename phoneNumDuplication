public class phoneNum {
	public static List<String> letterCombinations(String digits){
		 if (digits == null) return null;
	      	  if (digits.isEmpty()) return new ArrayList<>();
		String[] mapping = new String[] {"0", "abc", "def", "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz"};
		StringBuilder sb = new StringBuilder();
		int[] record = new int[9];
		List<String> result = new ArrayList<>();
		dfs(sb, 0, digits, record, mapping, result);
		return result;
	}

	private static void dfs(StringBuilder sb, int idx, String digits, int[] record, String[] mapping, List<String> result){
		if (idx == digits.length()){
			result.add(new String(sb));
			return;
		}
		char curr = digits.charAt(idx);
		int letterIdx = record[curr - '0'];
		for (int i = letterIdx; i < mapping[curr - '0'].length(); i++){
			record[curr - '0'] = i;
			char letter = mapping[curr - '0'].charAt(i);
			sb.append(letter);
			dfs(sb, idx + 1, digits, record, mapping, result);
			sb.deleteCharAt(sb.length() - 1);
		}	
		record[curr - '0'] = letterIdx;
		return;

	}
	
	public static void main(String args[]){
		System.out.println(letterCombinations("121"));
	}
